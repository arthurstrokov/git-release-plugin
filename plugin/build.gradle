/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'
    // Plugin for publishing a project to a repository
    id 'maven-publish'
    // Apply the Plugin Publish Plugin to make plugin publication possible
    id "com.gradle.plugin-publish" version "1.0.0-rc-1"
    // A plugin that helps you test your plugin against a variety of Gradle versions
    id "org.ysb33r.gradletest" version "3.0.0-alpha.2"
    // Get plugin from https://plugins.gradle.org
    id 'io.github.arthurstrokov.gitReleasePlugin' version '1.1'
}

version '1.1'
group = 'io.github.arthurstrokov'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

gradlePlugin {
    // Define the plugin
    plugins {
        gitReleasePlugin {
            id = 'io.github.arthurstrokov.gitReleasePlugin'
            displayName = 'Git release plugin'
            description = 'Plugin for creating git tag for release control'
            implementationClass = 'com.gmail.arthurstrokov.plugin.GitReleasePlugin'
        }
    }
}

pluginBundle {
    // These settings are set for the whole plugin bundle
    website = 'https://github.com/arthurstrokov/git-release-plugin'
    vcsUrl = 'https://github.com/arthurstrokov/git-release-plugin'

    description = 'Git release plugin'

    tags = ['individual', 'tags', 'git', 'github', 'git tag']
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

task runScript(type: JavaExec) {
    main 'GitReleasePlugin'
    systemProperty( 'major-branch', 'master' )
    classpath = sourceSets.main.runtimeClasspath
}
